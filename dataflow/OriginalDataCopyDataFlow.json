{
	"name": "OriginalDataCopyDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlCountryParquet",
						"type": "DatasetReference"
					},
					"name": "azurecountry"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlDateParquet",
						"type": "DatasetReference"
					},
					"name": "azuredate"
				},
				{
					"dataset": {
						"referenceName": "CosmosParquet",
						"type": "DatasetReference"
					},
					"name": "cosmos"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "countryParquet",
						"type": "DatasetReference"
					},
					"name": "country"
				},
				{
					"dataset": {
						"referenceName": "datesParquet",
						"type": "DatasetReference"
					},
					"name": "date"
				},
				{
					"dataset": {
						"referenceName": "policyparquet",
						"type": "DatasetReference"
					},
					"name": "policy"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azurecountry",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azuredate",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as string,",
				"          C1_School_closing as double,",
				"          C1_Flag as double,",
				"          C2_Workplace_closing as double,",
				"          C2_Flag as double,",
				"          C3_Cancel_public_events as double,",
				"          C3_Flag as double,",
				"          C4_Restrictions_on_gatherings as double,",
				"          C4_Flag as double,",
				"          C5_Close_public_transport as double,",
				"          C5_Flag as double,",
				"          C6_Stay_at_home_requirements as double,",
				"          C6_Flag as double,",
				"          C7_Restrictions_on_internal_movement as double,",
				"          C7_Flag as double,",
				"          C8_International_travel_controls as double,",
				"          E1_Income_support as double,",
				"          E1_Flag as double,",
				"          E2_Debt_contract_relief as double,",
				"          E3_Fiscal_measures as double,",
				"          E4_International_support as double,",
				"          H1_Public_information_campaigns as double,",
				"          H1_Flag as double,",
				"          H2_Testing_policy as double,",
				"          H3_Contact_tracing as double,",
				"          H4_Emergency_investment_in_healthcare as double,",
				"          H5_Investment_in_vaccines as double,",
				"          H6_Facial_Coverings as double,",
				"          H6_Flag as double,",
				"          H7_Vaccination_policy as double,",
				"          H7_Flag as double,",
				"          H8_Protection_of_elderly_people as double,",
				"          H8_Flag as double,",
				"          M1_Wildcard as double,",
				"          StringencyIndex as double,",
				"          StringencyIndexForDisplay as double,",
				"          StringencyLegacyIndex as double,",
				"          StringencyLegacyIndexForDisplay as double,",
				"          GovernmentResponseIndex as double,",
				"          GovernmentResponseIndexForDisplay as double,",
				"          ContainmentHealthIndex as double,",
				"          ContainmentHealthIndexForDisplay as double,",
				"          EconomicSupportIndex as double,",
				"          EconomicSupportIndexForDisplay as double,",
				"          id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> cosmos",
				"cosmos cast(output(",
				"          Date as date 'MM/dd/yyyy'",
				"     ),",
				"     errors: true) ~> cast1",
				"azurecountry sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['country.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> country",
				"azuredate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['dates.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> date",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['policy.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> policy"
			]
		}
	}
}