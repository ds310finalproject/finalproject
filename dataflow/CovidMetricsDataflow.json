{
	"name": "CovidMetricsDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlCovid_MetricsParquet",
						"type": "DatasetReference"
					},
					"name": "AzureCovidMetrics"
				},
				{
					"dataset": {
						"referenceName": "SqlServerCovid_MetricsParquet",
						"type": "DatasetReference"
					},
					"name": "SqlCovidMetrics"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RecoveriesParquet",
						"type": "DatasetReference"
					},
					"name": "Recoveries"
				},
				{
					"dataset": {
						"referenceName": "CasesParquet",
						"type": "DatasetReference"
					},
					"name": "Cases"
				},
				{
					"dataset": {
						"referenceName": "DeathsParquet",
						"type": "DatasetReference"
					},
					"name": "Deaths"
				}
			],
			"transformations": [
				{
					"name": "RecoveriesUnion"
				},
				{
					"name": "RecoveriesSelect"
				},
				{
					"name": "CasesUnion"
				},
				{
					"name": "CasesSelect"
				},
				{
					"name": "DeathsUnion"
				},
				{
					"name": "DeathsSelect"
				},
				{
					"name": "SIDdeaths"
				},
				{
					"name": "SIDcases"
				},
				{
					"name": "SIDRecoveries"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureCovidMetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SqlCovidMetrics",
				"AzureCovidMetrics, SqlCovidMetrics union(byName: true)~> RecoveriesUnion",
				"RecoveriesUnion select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RecoveriesSelect",
				"AzureCovidMetrics, SqlCovidMetrics union(byName: true)~> CasesUnion",
				"CasesUnion select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesSelect",
				"AzureCovidMetrics, SqlCovidMetrics union(byName: true)~> DeathsUnion",
				"DeathsUnion select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DeathsSelect",
				"DeathsSelect derive(SID = concat(ISO3, toString(Updated))) ~> SIDdeaths",
				"CasesSelect derive(SID = concat(ISO3, toString(Updated))) ~> SIDcases",
				"RecoveriesSelect derive(SID = concat(ISO3, toString(Updated))) ~> SIDRecoveries",
				"SIDRecoveries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['recoveries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Recoveries",
				"SIDcases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['cases.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Cases",
				"SIDdeaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Deaths"
			]
		}
	}
}